# deploy.yml
name: Deploy Docs

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
    paths:  # 路径过滤条件
      - '.github/workflows/deploy.yml' # 修改 GitHub Actions 文件时也触发文档部署

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # 切换分支
      - name: Checkout
        uses: actions/checkout@v4
        with:
            # Use `fetch-depth: 0` to ensure Docusaurus's last update time displays correctly.
            fetch-depth: 0
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Install dependencies
        working-directory: ./
        run: |
          npm ci
      - name: Build
        working-directory: ./
        run: |
          npm run clear
          npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages  # optional, default is github-pages
          path: build/        # Path of the directory containing the static assets.
          retention-days: 1   # optional, default is 1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build  # 依赖build任务完成
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 上传至服务器并部署
  upload:
    runs-on: ubuntu-latest
    needs: build  # 依赖build任务完成
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: github-pages

    - name: Print directory tree
      run: |
        # 安装 tree 命令（Ubuntu）
        sudo apt-get update && sudo apt-get install -y tree
        tree ./

    - name: Unzip tar file
      run: |
        mkdir ./docs-dir
        tar -xvf artifact.tar -C ./docs-dir
        rm -f artifact.tar

    - name: Print directory tree
      run: |
        # 打印当前目录的树形结构
        pwd
        tree ./

    - name: Upload to Server via SSH
      uses: easingthemes/ssh-deploy@v5.1.0
      env:
        # 使用 ssh-keygen 创建一个密钥对，私钥配置在下面，公钥填入服务端 authorized_keys 文件中即可
        SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SERVER_SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
        REMOTE_USER: ${{ secrets.DEPLOY_SERVER_USER }}
        SOURCE: "docs-dir/"
        TARGET: "${{ secrets.SERVER_DEPLOY_PATH }}"
        ARGS: "-avz --delete --chown=${{ secrets.DEPLOY_SERVER_FILE_CHOWN_ARG }}"
        # ARGS: "-avz --delete --dry-run"  # 首次运行时建议先使用--dry-run测试
        EXCLUDE: ".git/*, *.md"  # 可选排除文件
        SCRIPT_BEFORE: |
          whoami
          ls -al
        SCRIPT_AFTER: |
          whoami
          ls -al
          echo $RSYNC_STDOUT
